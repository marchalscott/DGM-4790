### This file was autogenerated by Nexus 0.11.3
### Do not make changes to this file directly


type AggregateProduct {
  count: Int!
}

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Product {
  brand: String!
  color: String!
  id: ID!
  name: String!
  price: Float!
  size: String!
  style: String!
}

type ProductConnection {
  aggregate: AggregateProduct!
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
}

input ProductCreateInput {
  brand: String!
  color: String!
  name: String!
  price: Float!
  size: String!
  style: String!
}

type ProductEdge {
  cursor: String!
  node: Product!
}

enum ProductOrderByInput {
  brand_ASC
  brand_DESC
  color_ASC
  color_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  size_ASC
  size_DESC
  style_ASC
  style_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProductUpdateInput {
  brand: String
  color: String
  name: String
  price: Float
  size: String
  style: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  brand: String
  brand_contains: String
  brand_ends_with: String
  brand_gt: String
  brand_gte: String
  brand_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_not: String
  brand_not_contains: String
  brand_not_ends_with: String
  brand_not_in: [String!]
  brand_not_starts_with: String
  brand_starts_with: String
  color: String
  color_contains: String
  color_ends_with: String
  color_gt: String
  color_gte: String
  color_in: [String!]
  color_lt: String
  color_lte: String
  color_not: String
  color_not_contains: String
  color_not_ends_with: String
  color_not_in: [String!]
  color_not_starts_with: String
  color_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  price: Float
  price_gt: Float
  price_gte: Float
  price_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_not: Float
  price_not_in: [Float!]
  size: String
  size_contains: String
  size_ends_with: String
  size_gt: String
  size_gte: String
  size_in: [String!]
  size_lt: String
  size_lte: String
  size_not: String
  size_not_contains: String
  size_not_ends_with: String
  size_not_in: [String!]
  size_not_starts_with: String
  size_starts_with: String
  style: String
  style_contains: String
  style_ends_with: String
  style_gt: String
  style_gte: String
  style_in: [String!]
  style_lt: String
  style_lte: String
  style_not: String
  style_not_contains: String
  style_not_ends_with: String
  style_not_in: [String!]
  style_not_starts_with: String
  style_starts_with: String
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  product(where: ProductWhereUniqueInput!): Product
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product!]!
  productsConnection(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): ProductConnection!
}
