module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateTrails {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createTrails(data: TrailsCreateInput!): Trails!
  updateManyTrailses(data: TrailsUpdateManyMutationInput!, where: TrailsWhereInput): BatchPayload!
  deleteManyTrailses(where: TrailsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  trailses(where: TrailsWhereInput, orderBy: TrailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trails]!
  trailsesConnection(where: TrailsWhereInput, orderBy: TrailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TrailsConnection!
  node(id: ID!): Node
}

type Subscription {
  trails(where: TrailsSubscriptionWhereInput): TrailsSubscriptionPayload
}

type Trails {
  name: String
  type: String
  stars: Int
  difficulty: String
  length: String
}

type TrailsConnection {
  pageInfo: PageInfo!
  edges: [TrailsEdge]!
  aggregate: AggregateTrails!
}

input TrailsCreateInput {
  name: String
  type: String
  stars: Int
  difficulty: String
  length: String
}

type TrailsEdge {
  node: Trails!
  cursor: String!
}

enum TrailsOrderByInput {
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  stars_ASC
  stars_DESC
  difficulty_ASC
  difficulty_DESC
  length_ASC
  length_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TrailsPreviousValues {
  name: String
  type: String
  stars: Int
  difficulty: String
  length: String
}

type TrailsSubscriptionPayload {
  mutation: MutationType!
  node: Trails
  updatedFields: [String!]
  previousValues: TrailsPreviousValues
}

input TrailsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TrailsWhereInput
  AND: [TrailsSubscriptionWhereInput!]
  OR: [TrailsSubscriptionWhereInput!]
  NOT: [TrailsSubscriptionWhereInput!]
}

input TrailsUpdateManyMutationInput {
  name: String
  type: String
  stars: Int
  difficulty: String
  length: String
}

input TrailsWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  stars: Int
  stars_not: Int
  stars_in: [Int!]
  stars_not_in: [Int!]
  stars_lt: Int
  stars_lte: Int
  stars_gt: Int
  stars_gte: Int
  difficulty: String
  difficulty_not: String
  difficulty_in: [String!]
  difficulty_not_in: [String!]
  difficulty_lt: String
  difficulty_lte: String
  difficulty_gt: String
  difficulty_gte: String
  difficulty_contains: String
  difficulty_not_contains: String
  difficulty_starts_with: String
  difficulty_not_starts_with: String
  difficulty_ends_with: String
  difficulty_not_ends_with: String
  length: String
  length_not: String
  length_in: [String!]
  length_not_in: [String!]
  length_lt: String
  length_lte: String
  length_gt: String
  length_gte: String
  length_contains: String
  length_not_contains: String
  length_starts_with: String
  length_not_starts_with: String
  length_ends_with: String
  length_not_ends_with: String
  AND: [TrailsWhereInput!]
  OR: [TrailsWhereInput!]
  NOT: [TrailsWhereInput!]
}
`
      }
    