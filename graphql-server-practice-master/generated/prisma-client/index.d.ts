// Code generated by Prisma (prisma@1.28.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  trails: (where?: TrailsWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  trailses: (
    args?: {
      where?: TrailsWhereInput;
      orderBy?: TrailsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Trails>;
  trailsesConnection: (
    args?: {
      where?: TrailsWhereInput;
      orderBy?: TrailsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TrailsConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createTrails: (data: TrailsCreateInput) => TrailsPromise;
  updateManyTrailses: (
    args: { data: TrailsUpdateManyMutationInput; where?: TrailsWhereInput }
  ) => BatchPayloadPromise;
  deleteManyTrailses: (where?: TrailsWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  trails: (
    where?: TrailsSubscriptionWhereInput
  ) => TrailsSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TrailsOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "stars_ASC"
  | "stars_DESC"
  | "difficulty_ASC"
  | "difficulty_DESC"
  | "length_ASC"
  | "length_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TrailsWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  stars?: Int;
  stars_not?: Int;
  stars_in?: Int[] | Int;
  stars_not_in?: Int[] | Int;
  stars_lt?: Int;
  stars_lte?: Int;
  stars_gt?: Int;
  stars_gte?: Int;
  difficulty?: String;
  difficulty_not?: String;
  difficulty_in?: String[] | String;
  difficulty_not_in?: String[] | String;
  difficulty_lt?: String;
  difficulty_lte?: String;
  difficulty_gt?: String;
  difficulty_gte?: String;
  difficulty_contains?: String;
  difficulty_not_contains?: String;
  difficulty_starts_with?: String;
  difficulty_not_starts_with?: String;
  difficulty_ends_with?: String;
  difficulty_not_ends_with?: String;
  length?: String;
  length_not?: String;
  length_in?: String[] | String;
  length_not_in?: String[] | String;
  length_lt?: String;
  length_lte?: String;
  length_gt?: String;
  length_gte?: String;
  length_contains?: String;
  length_not_contains?: String;
  length_starts_with?: String;
  length_not_starts_with?: String;
  length_ends_with?: String;
  length_not_ends_with?: String;
  AND?: TrailsWhereInput[] | TrailsWhereInput;
  OR?: TrailsWhereInput[] | TrailsWhereInput;
  NOT?: TrailsWhereInput[] | TrailsWhereInput;
}

export interface TrailsCreateInput {
  name?: String;
  type?: String;
  stars?: Int;
  difficulty?: String;
  length?: String;
}

export interface TrailsUpdateManyMutationInput {
  name?: String;
  type?: String;
  stars?: Int;
  difficulty?: String;
  length?: String;
}

export interface TrailsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TrailsWhereInput;
  AND?: TrailsSubscriptionWhereInput[] | TrailsSubscriptionWhereInput;
  OR?: TrailsSubscriptionWhereInput[] | TrailsSubscriptionWhereInput;
  NOT?: TrailsSubscriptionWhereInput[] | TrailsSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Trails {
  name?: String;
  type?: String;
  stars?: Int;
  difficulty?: String;
  length?: String;
}

export interface TrailsPromise extends Promise<Trails>, Fragmentable {
  name: () => Promise<String>;
  type: () => Promise<String>;
  stars: () => Promise<Int>;
  difficulty: () => Promise<String>;
  length: () => Promise<String>;
}

export interface TrailsSubscription
  extends Promise<AsyncIterator<Trails>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  stars: () => Promise<AsyncIterator<Int>>;
  difficulty: () => Promise<AsyncIterator<String>>;
  length: () => Promise<AsyncIterator<String>>;
}

export interface TrailsConnection {
  pageInfo: PageInfo;
  edges: TrailsEdge[];
}

export interface TrailsConnectionPromise
  extends Promise<TrailsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TrailsEdge>>() => T;
  aggregate: <T = AggregateTrailsPromise>() => T;
}

export interface TrailsConnectionSubscription
  extends Promise<AsyncIterator<TrailsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TrailsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTrailsSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TrailsEdge {
  node: Trails;
  cursor: String;
}

export interface TrailsEdgePromise extends Promise<TrailsEdge>, Fragmentable {
  node: <T = TrailsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TrailsEdgeSubscription
  extends Promise<AsyncIterator<TrailsEdge>>,
    Fragmentable {
  node: <T = TrailsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTrails {
  count: Int;
}

export interface AggregateTrailsPromise
  extends Promise<AggregateTrails>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTrailsSubscription
  extends Promise<AsyncIterator<AggregateTrails>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TrailsSubscriptionPayload {
  mutation: MutationType;
  node: Trails;
  updatedFields: String[];
  previousValues: TrailsPreviousValues;
}

export interface TrailsSubscriptionPayloadPromise
  extends Promise<TrailsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TrailsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TrailsPreviousValuesPromise>() => T;
}

export interface TrailsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TrailsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TrailsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TrailsPreviousValuesSubscription>() => T;
}

export interface TrailsPreviousValues {
  name?: String;
  type?: String;
  stars?: Int;
  difficulty?: String;
  length?: String;
}

export interface TrailsPreviousValuesPromise
  extends Promise<TrailsPreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
  type: () => Promise<String>;
  stars: () => Promise<Int>;
  difficulty: () => Promise<String>;
  length: () => Promise<String>;
}

export interface TrailsPreviousValuesSubscription
  extends Promise<AsyncIterator<TrailsPreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  stars: () => Promise<AsyncIterator<Int>>;
  difficulty: () => Promise<AsyncIterator<String>>;
  length: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Trails",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
