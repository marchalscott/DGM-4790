/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../../../../generated/prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Trails: TrailsObject
      TrailsConnection: TrailsConnectionObject
      PageInfo: PageInfoObject
      TrailsEdge: TrailsEdgeObject
      AggregateTrails: AggregateTrailsObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      TrailsSubscriptionPayload: TrailsSubscriptionPayloadObject
      TrailsPreviousValues: TrailsPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Trails: TrailsFieldDetails
      TrailsConnection: TrailsConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      TrailsEdge: TrailsEdgeFieldDetails
      AggregateTrails: AggregateTrailsFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      TrailsSubscriptionPayload: TrailsSubscriptionPayloadFieldDetails
      TrailsPreviousValues: TrailsPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      TrailsWhereInput: TrailsWhereInputInputObject
      TrailsCreateInput: TrailsCreateInputInputObject
      TrailsUpdateManyMutationInput: TrailsUpdateManyMutationInputInputObject
      TrailsSubscriptionWhereInput: TrailsSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    TrailsOrderByInput: TrailsOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'trailses', args?: QueryTrailsesArgs[] | false, alias?: string  } 
  | { name: 'trailsesConnection', args?: QueryTrailsesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'trailses'
  | 'trailsesConnection'


type QueryTrailsesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTrailsesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  trailses: {
    type: 'Trails'
    args: Record<QueryTrailsesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TrailsWhereInput | null, orderBy?: prisma.TrailsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trails[]> | prisma.Trails[]
  }
  trailsesConnection: {
    type: 'TrailsConnection'
    args: Record<QueryTrailsesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TrailsWhereInput | null, orderBy?: prisma.TrailsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrailsConnection> | prisma.TrailsConnection
  }
}
  

// Types for Trails

type TrailsObject =
  | TrailsFields
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'stars', args?: [] | false, alias?: string  } 
  | { name: 'difficulty', args?: [] | false, alias?: string  } 
  | { name: 'length', args?: [] | false, alias?: string  } 

type TrailsFields =
  | 'name'
  | 'type'
  | 'stars'
  | 'difficulty'
  | 'length'



  

export interface TrailsFieldDetails {
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  stars: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  difficulty: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  length: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TrailsConnection

type TrailsConnectionObject =
  | TrailsConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TrailsConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TrailsConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrailsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TrailsEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TrailsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrailsEdge[]> | prisma.TrailsEdge[]
  }
  aggregate: {
    type: 'AggregateTrails'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrailsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTrails> | prisma.AggregateTrails
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TrailsEdge

type TrailsEdgeObject =
  | TrailsEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TrailsEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TrailsEdgeFieldDetails {
  node: {
    type: 'Trails'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrailsEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trails> | prisma.Trails
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTrails

type AggregateTrailsObject =
  | AggregateTrailsFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTrailsFields =
  | 'count'



  

export interface AggregateTrailsFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createTrails', args?: MutationCreateTrailsArgs[] | false, alias?: string  } 
  | { name: 'updateManyTrailses', args?: MutationUpdateManyTrailsesArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTrailses', args?: MutationDeleteManyTrailsesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createTrails'
  | 'updateManyTrailses'
  | 'deleteManyTrailses'


type MutationCreateTrailsArgs =
  | 'data'
type MutationUpdateManyTrailsesArgs =
  | 'data'
  | 'where'
type MutationDeleteManyTrailsesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createTrails: {
    type: 'Trails'
    args: Record<MutationCreateTrailsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrailsCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trails> | prisma.Trails
  }
  updateManyTrailses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTrailsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrailsUpdateManyMutationInput, where?: TrailsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  deleteManyTrailses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTrailsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TrailsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'trails', args?: SubscriptionTrailsArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'trails'


type SubscriptionTrailsArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  trails: {
    type: 'TrailsSubscriptionPayload'
    args: Record<SubscriptionTrailsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TrailsSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrailsSubscriptionPayload | null> | prisma.TrailsSubscriptionPayload | null
  }
}
  

// Types for TrailsSubscriptionPayload

type TrailsSubscriptionPayloadObject =
  | TrailsSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TrailsSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TrailsSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrailsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Trails'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TrailsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trails | null> | prisma.Trails | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TrailsPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TrailsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrailsPreviousValues | null> | prisma.TrailsPreviousValues | null
  }
}
  

// Types for TrailsPreviousValues

type TrailsPreviousValuesObject =
  | TrailsPreviousValuesFields
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'stars', args?: [] | false, alias?: string  } 
  | { name: 'difficulty', args?: [] | false, alias?: string  } 
  | { name: 'length', args?: [] | false, alias?: string  } 

type TrailsPreviousValuesFields =
  | 'name'
  | 'type'
  | 'stars'
  | 'difficulty'
  | 'length'



  

export interface TrailsPreviousValuesFieldDetails {
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  stars: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  difficulty: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  length: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface TrailsWhereInput {
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  stars?: number | null
  stars_not?: number | null
  stars_in?: number[]
  stars_not_in?: number[]
  stars_lt?: number | null
  stars_lte?: number | null
  stars_gt?: number | null
  stars_gte?: number | null
  difficulty?: string | null
  difficulty_not?: string | null
  difficulty_in?: string[]
  difficulty_not_in?: string[]
  difficulty_lt?: string | null
  difficulty_lte?: string | null
  difficulty_gt?: string | null
  difficulty_gte?: string | null
  difficulty_contains?: string | null
  difficulty_not_contains?: string | null
  difficulty_starts_with?: string | null
  difficulty_not_starts_with?: string | null
  difficulty_ends_with?: string | null
  difficulty_not_ends_with?: string | null
  length?: string | null
  length_not?: string | null
  length_in?: string[]
  length_not_in?: string[]
  length_lt?: string | null
  length_lte?: string | null
  length_gt?: string | null
  length_gte?: string | null
  length_contains?: string | null
  length_not_contains?: string | null
  length_starts_with?: string | null
  length_not_starts_with?: string | null
  length_ends_with?: string | null
  length_not_ends_with?: string | null
  AND?: TrailsWhereInput[]
  OR?: TrailsWhereInput[]
  NOT?: TrailsWhereInput[]
}
export type TrailsWhereInputInputObject =
  | Extract<keyof TrailsWhereInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'stars', alias?: string  } 
  | { name: 'stars_not', alias?: string  } 
  | { name: 'stars_in', alias?: string  } 
  | { name: 'stars_not_in', alias?: string  } 
  | { name: 'stars_lt', alias?: string  } 
  | { name: 'stars_lte', alias?: string  } 
  | { name: 'stars_gt', alias?: string  } 
  | { name: 'stars_gte', alias?: string  } 
  | { name: 'difficulty', alias?: string  } 
  | { name: 'difficulty_not', alias?: string  } 
  | { name: 'difficulty_in', alias?: string  } 
  | { name: 'difficulty_not_in', alias?: string  } 
  | { name: 'difficulty_lt', alias?: string  } 
  | { name: 'difficulty_lte', alias?: string  } 
  | { name: 'difficulty_gt', alias?: string  } 
  | { name: 'difficulty_gte', alias?: string  } 
  | { name: 'difficulty_contains', alias?: string  } 
  | { name: 'difficulty_not_contains', alias?: string  } 
  | { name: 'difficulty_starts_with', alias?: string  } 
  | { name: 'difficulty_not_starts_with', alias?: string  } 
  | { name: 'difficulty_ends_with', alias?: string  } 
  | { name: 'difficulty_not_ends_with', alias?: string  } 
  | { name: 'length', alias?: string  } 
  | { name: 'length_not', alias?: string  } 
  | { name: 'length_in', alias?: string  } 
  | { name: 'length_not_in', alias?: string  } 
  | { name: 'length_lt', alias?: string  } 
  | { name: 'length_lte', alias?: string  } 
  | { name: 'length_gt', alias?: string  } 
  | { name: 'length_gte', alias?: string  } 
  | { name: 'length_contains', alias?: string  } 
  | { name: 'length_not_contains', alias?: string  } 
  | { name: 'length_starts_with', alias?: string  } 
  | { name: 'length_not_starts_with', alias?: string  } 
  | { name: 'length_ends_with', alias?: string  } 
  | { name: 'length_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TrailsCreateInput {
  name?: string | null
  type?: string | null
  stars?: number | null
  difficulty?: string | null
  length?: string | null
}
export type TrailsCreateInputInputObject =
  | Extract<keyof TrailsCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'stars', alias?: string  } 
  | { name: 'difficulty', alias?: string  } 
  | { name: 'length', alias?: string  } 
  
export interface TrailsUpdateManyMutationInput {
  name?: string | null
  type?: string | null
  stars?: number | null
  difficulty?: string | null
  length?: string | null
}
export type TrailsUpdateManyMutationInputInputObject =
  | Extract<keyof TrailsUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'stars', alias?: string  } 
  | { name: 'difficulty', alias?: string  } 
  | { name: 'length', alias?: string  } 
  
export interface TrailsSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TrailsWhereInput | null
  AND?: TrailsSubscriptionWhereInput[]
  OR?: TrailsSubscriptionWhereInput[]
  NOT?: TrailsSubscriptionWhereInput[]
}
export type TrailsSubscriptionWhereInputInputObject =
  | Extract<keyof TrailsSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type TrailsOrderByInputValues =
  | 'name_ASC'
  | 'name_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'stars_ASC'
  | 'stars_DESC'
  | 'difficulty_ASC'
  | 'difficulty_DESC'
  | 'length_ASC'
  | 'length_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  